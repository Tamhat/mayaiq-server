const router = require("express").Router();
const User = require("../models/user-hk");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const auth = require("../middleware/auth");
const { sendEmail } = require("../utilis/index");

// register

router.post("/", async (req, res) => {
  try {
    const {
      email,
      password,
      fullname,
      mobileNumber,
      location,
      description,
      img,
      role,
      status,
    } = req.body;

    // validation

    if (!email || !password)
      return res
        .status(400)
        .json({ message: "Please enter all required fields." });

    if (password.length < 6)
      return res.status(400).json({
        message: "Please enter a password of at least 6 characters.",
      });

    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({
        message: "An account with this email already exists.",
      });
    }
    const savedUser = await User.create(req.body);

    res.status(200).json({
      data: savedUser,
      message: "Record Saved",
    });
  } catch (error) {
    console.log(error);
    res.status(400).json({
      message: error.message,
    });
  }
});

// log in
// /api/user/login
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;

    // validate

    if (!email || !password)
      return res
        .status(400)
        .json({ message: "Please enter all required fields." });

    const existingUser = await User.findOne({ email });
    if (!existingUser)
      return res.status(401).json({ message: "user is not registered." });

    const passwordCorrect = User.checkPassword(password, existingUser.password);

    if (!passwordCorrect)
      return res.status(401).json({ message: "Wrong email or password." });
    else {
      const payload = {
        id: existingUser._id,
        fullname: existingUser.fullname,
        email: existingUser?.email,
      };
      const token = jwt.sign(payload, process.env.JWT_SECRET);

      res.status(200).json({
        data: existingUser,
        token: token,
        userRole: existingUser?.role,
        message: "Login SuccessFull",
      });
    }
  } catch (err) {
    console.error(err);
    res.status(400).json({
      message: error.message,
    });
  }
});

// destroys the users session on logout

router.get("/logout", (req, res) => {
  res
    .cookie("token", "", {
      httpOnly: true,
      expires: new Date(0),
      secure: true,
      sameSite: "none",
    })
    .send();
});

router.get("/loggedIn", (req, res) => {
  try {
    const token = req.cookies.token;
    if (!token) return res.json(false);

    jwt.verify(token, process.env.JWT_SECRET);

    res.send(true);
  } catch (err) {
    res.json(false);
  }
});

router.get("/", auth, async (req, res) => {
  const query = {};
  if ("_id" in req.query) query._id = { $in: req.query._id.split(",") };
  if ("role" in req.query) query.role = req.query.role;
  let projections = { sort: "-_id" };
  await User.find(query, null, projections)
    .then((doc) => {
      if (doc.length == 0) {
        return res.status(404).json({ message: "No records found" });
      }
      res.status(200).json({ data: doc });
    })
    .catch((error) => {
      res.status(400).json({ message: error.message });
    });
});

router.get("/all", async (req, res) => {
  await User.find()
    .then((doc) => {
      res.status(200).json({
        data: doc,
      });
    })
    .catch((error) => {
      res.status(400).json({
        message: error.message,
      });
    });
});

router.put("/:id", async (req, res) => {
  try {
    const resp = await User.findByIdAndUpdate(req.params.id, req.body);
    res.status(200).json({
      data: resp,
      message: "Record Saved",
    });
  } catch (error) {
    res.status(400).json({
      message: error.message,
    });
  }
});

router.put("/changepassword/:id", auth, async (req, res) => {
  // console.log(req.body);
  if (!req.body.new_pass || !req.body.confirm_pass) {
    return res.status(400).json({
      message: "Missing information is required",
    });
  } else if (req.body.new_pass !== req.body.confirm_pass) {
    return res.status(400).json({
      message: "New Password and confirm passsword is not match",
    });
  }
  await User.findById(req.params.id)
    .then((doc) => {
      if (!User.checkPassword(req.body.curr_pass, doc.password)) {
        return res.status(400).json({
          message: "Current Password is not Correct",
        });
      } else {
        User.findByIdAndUpdate(
          req.params.id,
          {
            password: bcrypt.hashSync(req.body.new_pass, 10),
          },
          { new: true }
        ).exec();
      }
      // console.log(resp);
      res.status(200).json({
        data: doc,
        message: "Record Saved",
      });
    })
    .catch((error) => {
      res.status(400).json({
        message: error.message,
      });
    });
});

router.put("/password/forgetpassword", async (req, res) => {
  try {
    const password = Date.now().toString();
    const { email } = req.body;
    // console.log(email);
    const findUser = await User.findOne({ email });
    // console.log(findUser);
    if (!findUser) {
      res.status(400).json({
        message: "Email is not Found",
      });
    } else {
      const resp = await User.findOneAndUpdate(
        { email: req.body.email },
        { password: bcrypt.hashSync(password, 10) },
        { new: true }
      );
      // console.log(resp);
      sendEmail(req.body.email, { email: req.body.email, password });
      res.status(200).json({
        message: `Email is send to ${req.body.email}`,
      });
    }
  } catch (error) {
    res.status(400).json({
      message: error.message,
    });
  }
});
module.exports = router;
